Group Members: Senai, Khaled, Mohamad, Neron, Stefan
GitHub Project: BurgerOrder GitHub Repository

1. Link to the Project's GitHub Page
Link: https://github.com/Mohamad-Za/BurgerOrder.git

2. Brief Summary of Configuration Management
Configuration management is the process of handling changes in a software project over time. It ensures that each change is traceable and that all components are consistent and compatible. Configuration management facilitates teamwork, version control, and rollback of changes when necessary. Tools like Git help implement configuration management by versioning the code and tracking changes.

3. Common Git Workflow and Commands
The most common Git workflow, often called the Feature Branch Workflow, follows these steps:

Clone the repository: Download the project from a remote Git server.

Command: git clone https://github.com/username/repository.git
Create a branch: Create a new branch for working on a specific feature or fix.

Command: git checkout -b feature-branch
Add changes: Add changes to the staging area.

Command: git add .
Commit changes: Commit the changes with a descriptive message.

Command: git commit -m "Description of changes"
Push to remote: Upload your branch and commits to the remote Git server.

Command: git push origin feature-branch
Pull request: Create a pull request for reviewing and merging changes with the main branch.

Merge and pull latest changes: After approval, pull the latest version of the main branch.

Command: git pull origin main
4. Experiences with Configuration Management
What went well:

Git helped keep track of changes and avoided conflicts while working on the project. It was easy to manage multiple branches and create pull requests for review.
Challenges faced:

We encountered merge conflicts, especially when multiple people worked on the same file. Initially, it was also confusing to remember the correct Git command at each stage of the workflow.
How did we resolve difficulties? Could we have done things differently?

We resolved merge conflicts using conflict resolution tools by manually reviewing files and choosing the correct version. We realized that better communication and avoiding work on the same files simultaneously would have prevented many issues.
